{"version":3,"sources":["axios.js","components/Tweet/Tweet.js","components/Input/Input.js","components/Button/Button.js","components/PeopleToFollow/PeopleToFollow.js","firebase.js","pages/Home/Home.js","pages/Login/Login.js","pages/SignUp/SignUp.js","pages/AllTweets/AllTweets.js","App.js","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","tweet","props","initial","firstName","charAt","toUpperCase","react_default","a","createElement","className","lastName","time","message","input","inputElement","inputtype","Object","assign","label","button","children","peopleToFollow","email","Button_Button","type","onClick","clicked","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","Home","state","loginEmail","nweTweet","followingTweets","allUsers","tweets","following","created_at","loadDatabase","get","then","res","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","data","Symbol","iterator","next","done","user","value","err","return","_this","setState","storeTweetsYouFollow","catch","console","log","updateDatabase","ref","set","logOutHandler","signOut","listOfEmailYouFollow","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","usersFollowing","filter","includes","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","length","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","push","objectSpread","tempArray","_i","newObj","moment","sort","left","right","diff","formattedTime","map","format","changeCurrentTweetHandler","ev","newTweet","target","createNewTweetHandler","today","_iteratorNormalCompletion5","_didIteratorError5","_iteratorError5","_step5","_iterator5","followUserHandler","_iteratorNormalCompletion6","_didIteratorError6","_iteratorError6","_step6","_iterator6","_this2","this","onAuthStateChanged","firebaseUser","window","location","href","_this3","val","i","Tweet_Tweet","key","createTweetContainer","Input_Input","placeholder","onChange","rows","listOfPeopleToFollow","followingUsers","_iteratorNormalCompletion7","_didIteratorError7","_iteratorError7","_step7","_iterator7","unFollwingUsers","PeopleToFollow_PeopleToFollow","bind","userInfoContainer","numberOfTweets","numberOfFollowing","_iteratorNormalCompletion8","_didIteratorError8","_iteratorError8","_step8","_iterator8","Component","Login","errorMessage","emailText","passwordText","formLoginHandler","password","signInWithEmailAndPassword","e","inputTextHandler","form","id","SignUp","firstNameText","lastNameText","formSignupHandler","createUserWithEmailAndPassword","AllTweets","currentUser","allTweets","App","BrowserRouter","Route","path","exact","component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.43c63719.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://my-first-activity.firebaseio.com/-LYQMvCCcIhXxVdiPSvW'\r\n});\r\n\r\nexport default instance;","import React from 'react';\r\nimport './Tweet.css';\r\n\r\nconst tweet = (props) =>{\r\n    const initial = props.firstName.charAt(0).toUpperCase();\r\n    return (\r\n        <div className='Tweet'>\r\n            <div className='initials'><strong>{initial}</strong></div>\r\n            <div>\r\n                <div><strong>{props.firstName} {props.lastName}</strong> {props.time}</div>\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default tweet;","import React from 'react';\r\nimport './Input.css';\r\n\r\nconst input = (props) =>{\r\n    let inputElement = null;\r\n\r\n    if(props.inputtype === 'input'){\r\n        inputElement = <input className='inputElement' {...props}/>;\r\n    }\r\n    else if(props.inputtype === 'textarea'){\r\n        inputElement = <textarea className='inputElement' {...props}/>;\r\n    }\r\n\r\n    return (\r\n        <div className='Input'>\r\n            <label>{props.label}</label>\r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default input;","import React from 'react';\r\nimport './Button.css';\r\n\r\nconst button = (props) =>{\r\n    return (\r\n        <div className='Button'>\r\n            <button className='loginButton' {...props}>{props.children}</button>\r\n        </div>\r\n    )\r\n}\r\nexport default button;","import React from 'react';\r\nimport './PeopleToFollow.css';\r\nimport Button from '../Button/Button';\r\n\r\nconst peopleToFollow = (props) =>{\r\n    const initial = props.email.charAt(0).toUpperCase();\r\n    return (\r\n        <div className='PeopleToFollow'>\r\n            <div className='initials'><strong>{initial}</strong></div>\r\n            <div>\r\n                <div><strong>{props.firstName} {props.lastName}</strong></div>\r\n                <Button\r\n                    type='button'\r\n                    onClick={props.clicked}>Follow</Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default peopleToFollow;","import * as firebase from \"firebase\";\r\n\r\n  // Initialize Firebase\r\n  var config = {\r\n      apiKey: \"AIzaSyBMNjWQ2WDynf58aa8Opmgd8_T5hV5cGFU\",\r\n      authDomain: \"my-first-activity.firebaseapp.com\",\r\n      databaseURL: \"https://my-first-activity.firebaseio.com\",\r\n      projectId: \"my-first-activity\",\r\n      storageBucket: \"my-first-activity.appspot.com\",\r\n      messagingSenderId: \"494408684295\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\n    const database = firebase.database();\r\n\r\nexport {database};","import React, { Component } from 'react';\r\nimport './Home.css';\r\nimport * as firebase from \"firebase\";\r\nimport moment from 'moment';\r\nimport axios from '../../axios';\r\n\r\nimport Tweet from '../../components/Tweet/Tweet';\r\nimport Input from '../../components/Input/Input';\r\nimport Button from '../../components/Button/Button';\r\nimport PeopleToFollow from '../../components/PeopleToFollow/PeopleToFollow';\r\nimport {database} from \"../../firebase\";\r\n\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        loginEmail: '',\r\n        nweTweet: '',\r\n        followingTweets: [],\r\n        allUsers: [\r\n             {\r\n                email: 'jin@nieblo.com',\r\n                firstName: 'Jin',\r\n                lastName: 'Redmond',\r\n                tweets: [],\r\n                following: ['mike@nieblo.com', 'shimano@nieblo.com'],\r\n            },\r\n            {\r\n                email: 'mike@nieblo.com',\r\n                firstName: 'mike',\r\n                lastName: 'cheal',\r\n                tweets: [],\r\n                following: [],\r\n            },\r\n            {\r\n                email: 'shimano@nieblo.com',\r\n                firstName: 'shimano',\r\n                lastName: 'koji',\r\n                tweets: [\r\n                    {created_at: '2019-02-09T15:56:09-08:00', message: 'hhhhhhhh'},\r\n                    {created_at: '2018-02-09T15:56:09-08:00', message: 'ppppppp'},\r\n                ],\r\n                following: [],\r\n            },\r\n            {\r\n                email: 'testmail@test.com',\r\n                firstName: 'testFirst',\r\n                lastName: 'testLast',\r\n                tweets: [\r\n                    {created_at: '2019-01-09T15:56:09-08:00', message: 'kkkkkk'},\r\n                ],\r\n                following: [],\r\n            },\r\n\r\n        ],\r\n    };\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(firebaseUser =>{\r\n            if(firebaseUser){\r\n                this.setState({ loginEmail: firebaseUser.email });\r\n\r\n                // const user = firebase.auth().currentUser;\r\n                // console.log('current user: ', user);\r\n                this.loadDatabase(firebaseUser.email);\r\n                // this.storeTweetsYouFollow(firebaseUser.email);\r\n            }\r\n            else{\r\n                const url = '/';\r\n                window.location.href = url;\r\n                console.log('not logged in');\r\n            }\r\n        });\r\n    }\r\n\r\n    loadDatabase = (email) =>{\r\n        // console.log('loading database');\r\n\r\n        axios.get('/.json')\r\n            .then(res=>{\r\n                // console.log('load: ',res.data);\r\n\r\n                // firebase won't store empty array, so create empty array here\r\n                for(let user of res.data.allUsers){\r\n                    if(!user.tweets){\r\n                        user.tweets = [];\r\n                    }\r\n                    if(!user.following){\r\n                        user.following = [];\r\n                    }\r\n                }\r\n                // console.log('new res.data: ', res.data);\r\n                this.setState({allUsers: res.data.allUsers});\r\n                this.storeTweetsYouFollow(email);\r\n            })\r\n            .catch(err=>console.log(err));\r\n    }\r\n\r\n    updateDatabase = () =>{\r\n        // console.log('allusers: ', allUsers);\r\n\r\n        const data = this.state.allUsers;\r\n        database.ref(\"-LYQMvCCcIhXxVdiPSvW\").set({allUsers: data});\r\n    }\r\n\r\n    logOutHandler = () =>{\r\n        console.log('logging out');\r\n        firebase.auth().signOut();\r\n    }\r\n\r\n    storeTweetsYouFollow = (loginEmail) =>{\r\n        // console.log(loginEmail);\r\n        const tweets = [];\r\n        let listOfEmailYouFollow = [];\r\n        const allUsers = this.state.allUsers;\r\n\r\n        // list of email you follow\r\n        for(let user of allUsers){\r\n            if(user.email === loginEmail){\r\n                listOfEmailYouFollow = user.following;\r\n            }\r\n        }\r\n\r\n        // find users following\r\n        let usersFollowing = allUsers.filter(user=>{\r\n            return listOfEmailYouFollow.includes(user.email);\r\n        });\r\n\r\n        // save tweets you follow\r\n        for(let user of usersFollowing){\r\n            if(user.tweets.length){\r\n                for(let tweet of user.tweets){\r\n                    tweets.push({\r\n                        ...tweet,\r\n                        firstName : user.firstName,\r\n                        lastName : user.lastName,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n\r\n        // console.log('tweets', tweets);\r\n\r\n        const tempArray = [];\r\n        for(let tweet of tweets){\r\n            const newObj = {};\r\n            newObj.firstName = tweet.firstName;\r\n            newObj.lastName = tweet.lastName;\r\n            newObj.message = tweet.message;\r\n            newObj.created_at = moment(tweet.created_at);\r\n            tempArray.push(newObj);\r\n        }\r\n\r\n        // sort tweet by date/time\r\n        tempArray.sort((left, right) =>{\r\n            return right.created_at.diff(left.created_at);\r\n        });\r\n\r\n        // format date/time\r\n        // console.log('sorted tweets: ', tempArray);\r\n        const formattedTime = tempArray.map(tweet=>{\r\n            return {\r\n                firstName: tweet.firstName,\r\n                lastName: tweet.lastName,\r\n                message: tweet.message,\r\n                created_at: tweet.created_at.format('MM/DD/YYYY'),\r\n            }\r\n        });\r\n        // console.log('format: ', formattedTime);\r\n\r\n        this.setState({followingTweets: formattedTime});\r\n    }\r\n\r\n    changeCurrentTweetHandler = (ev) =>{\r\n        const newTweet = ev.target.value;\r\n        this.setState({newTweet: newTweet});\r\n    }\r\n\r\n    createNewTweetHandler = () =>{\r\n        const loginEmail = this.state.loginEmail;\r\n        if(this.state.newTweet && this.state.loginEmail){\r\n            const allUsers = this.state.allUsers;\r\n            const today = moment().format();\r\n            // console.log(today);\r\n\r\n            // add new tweet and time\r\n            for(let user of allUsers){\r\n                if(user.email === loginEmail){\r\n                    user.tweets.push({\r\n                        message: this.state.newTweet,\r\n                        created_at: today,\r\n                        firstName: user.firstName,\r\n                        lastName: user.lastName,\r\n                    });\r\n                }\r\n            }\r\n            // allUsers[loginEmail]['tweets'].push({\r\n            //    message: this.state.newTweet,\r\n            //     created_at: today,\r\n            // });\r\n\r\n            this.setState({\r\n                allUsers: allUsers,\r\n                newTweet: '',\r\n            });\r\n            console.log('allUsers: ',allUsers);\r\n\r\n            this.updateDatabase(allUsers);\r\n        }\r\n    }\r\n\r\n    followUserHandler = (email) =>{\r\n        const loginEmail = this.state.loginEmail;\r\n        const allUsers = this.state.allUsers;\r\n        // console.log('before: ', email);\r\n        // console.log('before', allUsers[0]);\r\n\r\n        for(let user of allUsers){\r\n            // find your own data\r\n            if(user.email === loginEmail){\r\n                user.following.push(email);\r\n            }\r\n        }\r\n        this.setState({allUsers: allUsers});\r\n        // console.log('================================');\r\n        // console.log('allusers: ',allUsers[0]);\r\n\r\n        this.storeTweetsYouFollow(loginEmail);\r\n        this.updateDatabase();\r\n    }\r\n\r\n    render() {\r\n        // render tweets of users that you follow\r\n        let followingTweets = <p>No tweet to display</p>;\r\n        // console.log(this.state.allUsers[0].following);\r\n        // console.log('=====================:',this.state.followingTweets);\r\n        if(this.state.followingTweets.length){\r\n            followingTweets = this.state.followingTweets.map((val, i)=>{\r\n                return <Tweet\r\n                    firstName={val.firstName}\r\n                    lastName={val.lastName}\r\n                    message={val.message}\r\n                    time={val.created_at}\r\n                    key={i}/>\r\n            });\r\n        }\r\n\r\n        const createTweetContainer = <div>\r\n                                        <Input\r\n                                            placeholder='tweet...'\r\n                                            type='text'\r\n                                            inputtype='textarea'\r\n                                            onChange={(ev)=>this.changeCurrentTweetHandler(ev)}\r\n                                            value={this.state.newTweet}\r\n                                            rows='1'/>\r\n                                        <Button\r\n                                            type='text'\r\n                                            onClick={this.createNewTweetHandler}>Create</Button>\r\n                                    </div>;\r\n\r\n        // render other users (people to follow)\r\n        const loginEmail = this.state.loginEmail;\r\n        let listOfPeopleToFollow = <p>No other users</p>;\r\n        if(loginEmail){\r\n            const allUsers = this.state.allUsers;\r\n            let followingUsers = [];\r\n\r\n            // find users you follow\r\n            for(let user of allUsers){\r\n                if(user.email === loginEmail){\r\n                    followingUsers = user.following;\r\n                }\r\n            }\r\n            // console.log('======', followingUsers);\r\n\r\n            // find users you don't follow\r\n            let unFollwingUsers = allUsers.filter(user=>{\r\n                return !followingUsers.includes(user.email);\r\n            });\r\n            // remove yourself\r\n            unFollwingUsers = unFollwingUsers.filter(user=>user.email !== loginEmail);\r\n            // console.log('leftover: ', unFollwingUsers);\r\n\r\n            if(unFollwingUsers.length){\r\n                listOfPeopleToFollow = unFollwingUsers.map((val, i)=>{\r\n                    return (\r\n                        <PeopleToFollow\r\n                            email={val.email}\r\n                            firstName={val.firstName}\r\n                            lastName={val.lastName}\r\n                            key={i}\r\n                            clicked={this.followUserHandler.bind(this, val.email)}/>\r\n                    )\r\n                });\r\n            }\r\n        }\r\n\r\n        // login user's info container\r\n        let userInfoContainer = '';\r\n\r\n        if(loginEmail){\r\n            const allUsers = this.state.allUsers;\r\n            let firstName = '';\r\n            let lastName = '';\r\n            let numberOfTweets = 0;\r\n            let numberOfFollowing = 0;\r\n            for(let user of allUsers){\r\n                if(user.email === loginEmail){\r\n                    firstName = user.firstName;\r\n                    lastName = user.lastName;\r\n                    numberOfTweets = user.tweets.length;\r\n                    numberOfFollowing = user.following.length;\r\n                }\r\n            }\r\n            userInfoContainer = <div className='userInfoContainer'>\r\n                                    <h2>{firstName} {lastName}</h2>\r\n                                    <div className='userDetailContainer'>\r\n                                        <div className=\"width-50\">\r\n                                            <div><a href='/allTweets'>Tweets</a></div>\r\n                                            {numberOfTweets}\r\n                                        </div>\r\n                                        <div className=\"width-50\">\r\n                                            <div>Following</div>\r\n                                            {numberOfFollowing}\r\n                                        </div>\r\n                                    </div>\r\n                              </div>;\r\n\r\n        }\r\n\r\n        return (\r\n            <div className=\"Home\">\r\n                <div className='nav'>\r\n                    <Button type='button' onClick={this.logOutHandler}>Log Out</Button>\r\n                </div>\r\n                <div className='pageContainer'>\r\n                    <div className=\"flex-33\">\r\n                        {userInfoContainer}\r\n                        <div className='peopleToFollowContainer'>\r\n                            {listOfPeopleToFollow}\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"flex-66\">\r\n                        {createTweetContainer}\r\n                        <div className='tweetsContainer'>\r\n                            {followingTweets}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from 'react';\r\nimport './Login.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Button from '../../components/Button/Button';\r\nimport * as firebase from \"firebase\";\r\n\r\n\r\nclass Login extends Component {\r\n    state = {\r\n        errorMessage: '',\r\n        emailText: '',\r\n        passwordText: '',\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(firebaseUser =>{\r\n            if(firebaseUser){\r\n                console.log(firebaseUser);\r\n                const url = '/home';\r\n                window.location.href = url;\r\n            }\r\n            else{\r\n                console.log('not logged in');\r\n            }\r\n        });\r\n    }\r\n\r\n    formLoginHandler = () =>{\r\n        // console.log('button pressed');\r\n        // console.log(this.state);\r\n        const email = this.state.emailText;\r\n        const password = this.state.passwordText;\r\n        const auth = firebase.auth();\r\n        const promise = auth.signInWithEmailAndPassword(email, password);\r\n        promise.catch(e=>{\r\n            console.log(e.message);\r\n            this.setState({errorMessage: e.message});\r\n        });\r\n    }\r\n\r\n    // formSignupHandler = () =>{\r\n    //     console.log('button pressed');\r\n    //     console.log(this.state);\r\n    //     const email = this.state.emailText;\r\n    //     const password = this.state.passwordText;\r\n    //     const auth = firebase.auth();\r\n    //     const promise = auth.createUserWithEmailAndPassword(email, password);\r\n    //     promise.catch(e=>console.log(e.message));\r\n    //\r\n    // }\r\n\r\n    inputTextHandler = (ev, type) =>{\r\n        if(type === 'username'){\r\n            this.setState({ emailText: ev.target.value});\r\n        }\r\n        else {\r\n            this.setState({ passwordText: ev.target.value});\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let errorMessage='';\r\n        if(this.state.errorMessage){\r\n            errorMessage = <p className='errorText'>{this.state.errorMessage}</p>;\r\n        }\r\n        const form = <form>\r\n                        <Input\r\n                            inputtype='input'\r\n                            type='text'\r\n                            label='Username'\r\n                            onChange={(ev)=>this.inputTextHandler(ev, 'username')}/>\r\n                        <Input\r\n                            inputtype='input'\r\n                            type='password'\r\n                            label='Password'\r\n                            onChange={(ev)=>this.inputTextHandler(ev, 'password')}/>\r\n                        {errorMessage}\r\n                        <Button onClick={()=>this.formLoginHandler()} type='button'>Log In</Button>\r\n                        <div className='linkContainer'>\r\n                            <div>or</div>\r\n                            <a id='signupLink' href=\"/signup\">Sign Up</a>\r\n                        </div>\r\n                    </form>;\r\n\r\n        return (\r\n                <div className=\"Login\">\r\n                    {form}\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport './SignUp.css';\r\nimport Input from '../../components/Input/Input';\r\nimport Button from '../../components/Button/Button';\r\nimport * as firebase from \"firebase\";\r\nimport {database} from \"../../firebase\";\r\nimport axios from '../../axios';\r\n\r\nclass SignUp extends Component {\r\n    state={\r\n        errorMessage: '',\r\n        firstNameText: '',\r\n        lastNameText: '',\r\n        emailText: '',\r\n        allUsers: {},\r\n        passwordText: '',\r\n    }\r\n\r\n    componentDidMount(){\r\n        firebase.auth().onAuthStateChanged(firebaseUser =>{\r\n            if(firebaseUser){\r\n                console.log(firebaseUser);\r\n                const url = '/home';\r\n                window.location.href = url;\r\n            }\r\n            else{\r\n                console.log('not logged in');\r\n                this.loadDatabase();\r\n            }\r\n        });\r\n    }\r\n\r\n    loadDatabase = () =>{\r\n        console.log('loading database');\r\n\r\n        axios.get('/.json')\r\n            .then(res=>{\r\n                console.log('load: ',res.data);\r\n                if(res.data.allUsers.length){\r\n                    console.log('yes length');\r\n                    this.setState({allUsers: res.data.allUsers});\r\n                }\r\n                else{\r\n                    console.log('no length');\r\n                    this.setState({allUsers: []});\r\n                }\r\n            })\r\n            .catch(err=>console.log(err));\r\n\r\n    }\r\n\r\n    // // update db\r\n    // updateDatabase = ()=>{\r\n    //     console.log('updating db');\r\n    //     let allUsers = [...this.state.allUsers];\r\n    //     database.ref().set(allUsers);\r\n    // }\r\n\r\n    updateDatabase = (email, firstName, lastName) =>{\r\n\r\n        const allUsers = this.state.allUsers;\r\n        console.log('allusers: ', allUsers);\r\n        // if(!allUsers[email]){\r\n        //     allUsers[email] = {\r\n        //         firstName: firstName,\r\n        //         lastName: lastName,\r\n        //         tweet: [],\r\n        //         following: [],\r\n        //     }\r\n        // }\r\n\r\n        allUsers.push({\r\n            firstName: firstName,\r\n            lastName: lastName,\r\n            email: email,\r\n            tweet: [],\r\n            following: [],\r\n        });\r\n\r\n        console.log('save data: ', allUsers);\r\n\r\n        // axios.post('/.json', allUsers)\r\n        //     .then(res=>console.log(res))\r\n        //     .catch(err=>console.log(err));\r\n\r\n        database.ref(\"-LYQMvCCcIhXxVdiPSvW\").set({allUsers: allUsers});\r\n\r\n    }\r\n\r\n    formSignupHandler = () =>{\r\n        // console.log('button pressed');\r\n        // console.log(this.state);\r\n        const email = this.state.emailText;\r\n        const password = this.state.passwordText;\r\n        const firstName = this.state.firstNameText;\r\n        const lastName = this.state.lastNameText;\r\n\r\n        if(firstName && lastName){\r\n            this.updateDatabase(email, firstName, lastName);\r\n\r\n            const auth = firebase.auth();\r\n            const promise = auth.createUserWithEmailAndPassword(email, password);\r\n            promise.catch(e=>{\r\n                console.log(e.message);\r\n                this.setState({errorMessage: e.message});\r\n            });\r\n        }\r\n        else{\r\n            const message = 'First name and last name required.';\r\n            this.setState({errorMessage: message});\r\n        }\r\n\r\n    }\r\n\r\n    inputTextHandler = (ev, type) =>{\r\n        if(type === 'email'){\r\n            this.setState({ emailText: ev.target.value});\r\n        }\r\n        else if(type === 'firstName') {\r\n            this.setState({ firstNameText: ev.target.value});\r\n        }\r\n        else if(type === 'lastName'){\r\n            this.setState({ lastNameText: ev.target.value});\r\n        }\r\n        else if(type === 'password'){\r\n            this.setState({ passwordText: ev.target.value});\r\n        }\r\n    }\r\n\r\n\r\n    render() {\r\n        let errorMessage='';\r\n        if(this.state.errorMessage){\r\n            errorMessage = <p className='errorText'>{this.state.errorMessage}</p>;\r\n        }\r\n        const form = <form>\r\n            <Input\r\n                inputtype='input'\r\n                type='text'\r\n                label='Email'\r\n                onChange={(ev)=>this.inputTextHandler(ev, 'email')}/>\r\n            <Input\r\n                inputtype='input'\r\n                type='text'\r\n                label='First name'\r\n                onChange={(ev)=>this.inputTextHandler(ev, 'firstName')}/>\r\n            <Input\r\n                inputtype='input'\r\n                type='text'\r\n                label='Last name'\r\n                onChange={(ev)=>this.inputTextHandler(ev, 'lastName')}/>\r\n            <Input\r\n                inputtype='input'\r\n                type='password'\r\n                label='Password'\r\n                onChange={(ev)=>this.inputTextHandler(ev, 'password')}/>\r\n            {errorMessage}\r\n            <Button id='signupButton' onClick={()=>this.formSignupHandler()} type='button'>Sign Up</Button>\r\n        </form>;\r\n\r\n        return (\r\n            <div className='SignUp'>\r\n                {form}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SignUp;","import React, { Component } from 'react';\r\nimport './AllTweets.css';\r\nimport * as firebase from \"firebase\";\r\nimport axios from \"../../axios\";\r\nimport moment from 'moment';\r\n\r\nimport Tweet from '../../components/Tweet/Tweet';\r\n\r\nclass AllTweets extends Component {\r\n    state = {\r\n        loginEmail: '',\r\n        allUsers: [\r\n            {\r\n                email: 'jin@nieblo.com',\r\n                firstName: 'Jin',\r\n                lastName: 'Redmond',\r\n                tweets: [\r\n                    {created_at: '2019-12-09T15:56:09-08:00', message: 'hihihi', firstName: 'Jin', lastName: 'Redmond'},\r\n\r\n                ],\r\n                following: ['mike@nieblo.com', 'shimano@nieblo.com'],\r\n            },\r\n            {\r\n                email: 'mike@nieblo.com',\r\n                firstName: 'mike',\r\n                lastName: 'cheal',\r\n                tweets: [],\r\n                following: [],\r\n            },\r\n            {\r\n                email: 'shimano@nieblo.com',\r\n                firstName: 'shimano',\r\n                lastName: 'koji',\r\n                tweets: [\r\n                    {created_at: '2019-02-09T15:56:09-08:00', message: 'hhhhhhhh'},\r\n                    {created_at: '2018-02-09T15:56:09-08:00', message: 'ppppppp'},\r\n                ],\r\n                following: [],\r\n            },\r\n            {\r\n                email: 'testmail@test.com',\r\n                firstName: 'testFirst',\r\n                lastName: 'testLast',\r\n                tweets: [\r\n                    {created_at: '2019-02-09T15:56:09-08:00', message: 'kkkkkk'},\r\n                ],\r\n                following: [],\r\n            },\r\n\r\n        ],\r\n    };\r\n\r\n    componentDidMount(){\r\n\r\n        firebase.auth().onAuthStateChanged(firebaseUser =>{\r\n            if(firebaseUser){\r\n                this.setState({ loginEmail: firebaseUser.email });\r\n\r\n                const user = firebase.auth().currentUser;\r\n                console.log('current user: ', user);\r\n                this.loadDatabase();\r\n            }\r\n            else{\r\n                const url = '/';\r\n                window.location.href = url;\r\n                console.log('not logged in');\r\n            }\r\n        });\r\n    }\r\n\r\n    loadDatabase = () =>{\r\n        console.log('loading database');\r\n\r\n        // axios.get('/.json')\r\n        //     .then(res=>{\r\n        //         console.log('load: ',res.data);\r\n        //         this.setState({allUsers: res.data});\r\n        //     })\r\n        //     .catch(err=>console.log(err));\r\n        //\r\n        // console.log('loading database');\r\n\r\n        axios.get('/.json')\r\n            .then(res=>{\r\n                console.log('load: ',res.data);\r\n\r\n                // firebase won't store empty array, so create empty array here\r\n                for(let user of res.data.allUsers){\r\n                    if(!user.tweets){\r\n                        user.tweets = [];\r\n                    }\r\n                    if(!user.following){\r\n                        user.following = [];\r\n                    }\r\n                }\r\n                console.log('new res.data: ', res.data);\r\n                this.setState({allUsers: res.data.allUsers});\r\n            })\r\n            .catch(err=>console.log(err));\r\n\r\n    }\r\n\r\n    render(){\r\n\r\n        // render tweets\r\n        let allTweets = <p>You don't have any tweet</p>;\r\n        const allUsers = this.state.allUsers;\r\n        const loginEmail = this.state.loginEmail;\r\n        let tweets = [];\r\n\r\n        for(let user of allUsers){\r\n            if(user.email === loginEmail){\r\n                tweets = user.tweets;\r\n            }\r\n        }\r\n\r\n        console.log('tweets:',tweets);\r\n\r\n        // format date/time\r\n        // console.log('sorted tweets: ', tempArray);\r\n        const tempArray = tweets.map(tweet=>{\r\n            return {\r\n                firstName: tweet.firstName,\r\n                lastName: tweet.lastName,\r\n                message: tweet.message,\r\n                created_at: moment(tweet.created_at),\r\n            }\r\n        });\r\n        // console.log('sorted tweets: ', tempArray);\r\n        const formattedTime = tempArray.map(tweet=>{\r\n            return {\r\n                firstName: tweet.firstName,\r\n                lastName: tweet.lastName,\r\n                message: tweet.message,\r\n                created_at: tweet.created_at.format('MM/DD/YYYY'),\r\n            }\r\n        });\r\n        // console.log('format: ', formattedTime);\r\n\r\n        if(tweets.length){\r\n            allTweets = formattedTime.map(val=>{\r\n                return <Tweet\r\n                    firstName={val.firstName}\r\n                    message={val.message}\r\n                    time={val.created_at}\r\n                    key={val.created_at}/>\r\n            });\r\n        }\r\n\r\n        return(\r\n            <div className='AllTweets'>\r\n                <a href=\"/home\">Back</a>\r\n                {allTweets}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AllTweets;","import React, { Component } from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\n// import logo from './logo.svg';\nimport './App.css';\nimport Home from './pages/Home/Home';\nimport Login from './pages/Login/Login';\nimport SignUp from './pages/SignUp/SignUp';\nimport AllTweets from './pages/AllTweets/AllTweets';\n\nclass App extends Component {\n\n    render() {\n        return (\n            <BrowserRouter>\n                <div className=\"App\">\n                    <Route path='/home' exact component={Home}/>\n                    <Route path='/' exact component={Login}/>\n                    <Route path='/signup' exact component={SignUp}/>\n                    <Route path='/allTweets' exact component={AllTweets}/>\n                </div>\n            </BrowserRouter>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}